@page "/editar-configuracion/{idConfiguracion:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@attribute [Authorize]


<button @onclick="@Volver" class="btn btn-sm btn-secondary">
    <i class="oi oi-arrow-circle-left"></i> Volver al listado
</button>

<hr />

<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar configuración</b></h3>
    <div>
        @*<button @onclick="@(() => BorrarArticulo(Configuracion.Id))" class="btn btn-sm btn-danger">
            <i class="oi oi-trash"></i> Eliminar configuración
        </button>*@
    </div>
</div>
<FormConfiguracion TextBotonSubmit="Guardar cambios"
                   OnValidSubmit="@EditarArtic" Configuracion="@Configuracion" />
@code {
    Configuracion Configuracion = new Configuracion();
    [Parameter] public int idConfiguracion { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        Configuracion = await Http.GetFromJsonAsync<Configuracion>($"/api/configuracion/{idConfiguracion}");
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/lista-configuracion");
        NavigationManager.NavigateTo("/editar/configuracion/1");
    }

    async Task EditarArtic()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {Configuracion.NombreSistema}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync("/api/configuracion", Configuracion);

            if (respuesta.IsSuccessStatusCode)
            {
                //NavigationManager.NavigateTo("/lista-configuracion");
                //await JS.InvokeVoidAsync("simple", "¡Éxito!", "Configuracion editada", "success");
                Snackbar.Add("Editada con éxito", Severity.Info, a => a.VisibleStateDuration = 200);
            }
            else
            {
                //await JS.InvokeVoidAsync("simple", "Error",
                //    "No se pudo editar la marca", "error");
                Snackbar.Add("No se pudo editar", Severity.Error, a => a.VisibleStateDuration = 200);
            }
        }
    }

    async Task BorrarArticulo(int idCategoria)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar {Configuracion.NombreSistema}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"/api/configuracion/{Configuracion.Id}");

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-configuracion");
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Configuracion eliminada", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    "No se pudo eliminar la marca", "error");
            }
        }
    }
}
