@page "/lista-ajustes"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]
@using System.Text.Json

@*<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Color="Color.Success" Size="Size.Medium">
    <a style="text-decoration:none; color:#fff;"  @onclick="CrearArticulo">Agregar ajuste</a>
</MudButton>*@



@if (Configuracion == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Configuracion.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontró ningún ajuste.</text>
    </div>
}
else
{   
    

    <MudTable Items="Configuracion">
        <HeaderContent>

        </HeaderContent>
        <RowTemplate>
            <br />
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Medium">
                <a style="text-decoration:none; color:#fff;" 
                   @onclick="@(() => NavigationManager.NavigateTo($"/editar-ajustes/{context.Id}"))">Editar</a>
            </MudButton>
            <div class="form-field mt-2 mb-2">
                <div class="row">
                    <div class="col-6">
                        <div class="form-group row">
                            <label class="col-4 col-form-label">Nombre propietario</label>
                            <div class="col">
                                <div class="input-group">
                                    <MudTextField @bind-Value="@context.NombrePropietario" Label="Propietario del negocio" Variant="Variant.Outlined" oninput="this.value=this.value.toUpperCase()"
                                                  Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-4 col-form-label">Nombre del negocio</label>
                            <div class="col">
                                <div class="input-group">
                                    <MudTextField @bind-Value="@context.NombreSistema" Label="Nombre del negocio" Variant="Variant.Outlined" oninput="this.value=this.value.toUpperCase()"
                                         Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-4 col-form-label">Dirección</label>
                            <div class="col">
                                <div class="input-group">
                                    <MudTextField @bind-Value="@context.Direccion" Label="Dirección" Variant="Variant.Outlined" oninput="this.value=this.value.toUpperCase()"
                                                  Margin="Margin.Dense" ReadOnly="true" Lines="3"></MudTextField>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-4 col-form-label">Teléfono</label>
                            <div class="col">
                                <div class="input-group">
                                    <MudTextField @bind-Value="@context.Telefono" Label="Teléfono" Variant="Variant.Outlined" oninput="this.value=this.value.toUpperCase()"
                                                  Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-4 col-form-label">Email</label>
                            <div class="col">
                                <div class="input-group">
                                    <MudTextField @bind-Value="@context.Email" Label="Correo electrónico" Variant="Variant.Outlined" oninput="this.value=this.value.toUpperCase()"
                                                  Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-4 col-form-label">R.U.C</label>
                            <div class="col">
                                <div class="input-group">
                                    <MudTextField @bind-Value="@context.RUC" Label="Número RUC" Variant="Variant.Outlined" oninput="this.value=this.value.toUpperCase()"
                                                  Margin="Margin.Dense" ReadOnly="true"></MudTextField>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </RowTemplate>
    </MudTable>

    


}
@code {    
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Configuracion selectedItem1 = null;
    private HashSet<Configuracion> selectedItems = new HashSet<Configuracion>();    


    public List<Configuracion> Configuracion { get; set; } //muestra todos los Categoria
    Configuracion objConfiguracion = new Configuracion();

    private string NombreArtFiltro = String.Empty; //filtros

    protected bool lista = false;
    protected bool card = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarConfiguracion();
    }

    async Task CargarConfiguracion()
    {
        var httpResponse = await Http.GetAsync($"api/configuracion");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Configuracion = JsonSerializer.Deserialize<List<Configuracion>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    void CambiarVista() //  esta parte cambia entre vista de tarjetas o vista de grilla
    {
        lista = !lista;
        card = !card;
    }


    async Task MostrarTodos()
    {
        await CargarConfiguracion();
    }

    void CrearArticulo()
    {
        NavigationManager.NavigateTo("crearajustes");
    }

    private async Task Filtrar()
    {
        await CargarConfiguracion();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await CargarConfiguracion();
    }

    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Configuracion element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Configuracion element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.NombreSistema.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Direccion.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}