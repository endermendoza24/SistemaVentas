@page "/ver-venta/{idventa:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@using System.Text.Json

<div class="d-flex justify-content-between mb-2">
    <div class="btn-group">
        <button class="btn btn-sm btn-secondary" @onclick="@Volver">
            <i class="oi oi-arrow-circle-left"></i> Volver atrás
        </button>
        <button class="btn btn-sm btn-primary" onclick="window.print()">
            Imprimir
        </button>
    </div>
    <div class="btn-group">
        <button @onclick="@(() => BorrarVenta(venta.Id))" class="btn btn-sm btn-danger">
            <i class="oi oi-trash"></i> Eliminar venta
        </button>
    </div>
</div>

@if (venta != null)
{
    <div class="card m-1" style="border-color: #fff; border-style: dotted; box-shadow: 22px 3px 39px 1px rgba(0,0,0,0.51);">
        <div class="card-body">
            <h4 class="card-title d-flex justify-content-center">
                <b>FACTURA</b>
            </h4>

            <div class="d-flex justify-content-between">
                <b>CAPRICHOS </b> @*aqui irán los datos de la tabla configuración*@
                <small><b>N° factura:</b> @venta.Id</small>
            </div>

            <div class="d-flex justify-content-between">
                <small>Tienda de ropa Caprichos</small>
                <small><b>Fecha:</b> @venta.Fecha</small>
            </div>
            <div class="d-flex justify-content-between">
                <small></small>
                <small><b>F.de Pago:</b> @venta.FormaPago</small>
            </div>

            <div class="d-flex justify-content-between">
                <small>82072291</small>
            </div>

            @if (venta.ClienteId != null)
            {
                <hr />
                <div class="text-left">
                    <small><b>Cliente:</b> @venta.Cliente.NombreyApellido</small> <br />
                    <small><b>Dirección:</b> @venta.Cliente.Dirección</small> <br />
                    <small><b>Teléfono:</b> @venta.Cliente.Teléfono</small>
                </div>
            }
            <hr />

            <table class="table table-sm">
                <thead>
                    <tr>
                        <th><small>Descripción</small></th>
                        <th><small>Precio x un.</small></th>
                        <th><small>Cantidad</small></th>
                        <th><small>Descuento</small></th>
                        <th><small>Iva aplicada</small></th>
                        <th><small>Subtotal</small></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in venta.DetalleVentas)
                    {
                        <tr>
                            <td><small>@item.Articulo.Nombre</small></td>
                            <td><small>@item.Precio</small></td>
                            <td><small>@item.Cantidad</small></td>
                            <td><small>@item.Descuento%</small></td>
                            <td><small>@item.Iva</small></td>
                            <td><small>@item.SubTotal</small></td>
                        </tr>
                    }
                </tbody>
            </table>

            <p class="card-text text-right m-4">
                <h6><b>TOTAL</b></h6>
                <h5><b>C$@venta.Total</b></h5>
            </p>
        </div>
    </div>
}

@code {
    public Venta venta { get; set; }

    [Parameter] public int idventa { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await Http.GetAsync($"api/ventas/{idventa}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            venta = JsonSerializer.Deserialize<Venta>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            await JS.InvokeVoidAsync("simple", "Error", "Venta no encontrada.", "error");
            NavigationManager.NavigateTo("lista-ventas");
        }


    }

    async Task BorrarVenta(int idventa)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "¿Eliminar venta?",
            $"Venta N° {venta.Id}. Fecha: {venta.Fecha}. Total: {venta.Total}", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"/api/ventas/{idventa}");

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("lista-ventas");
                await JS.InvokeVoidAsync("simple", "¡Exito!", "Venta eliminada", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", "No se pudo eliminar venta", "error");
            }
        }
    }

    void Volver()
    {
        NavigationManager.NavigateTo("lista-ventas");
    }



}