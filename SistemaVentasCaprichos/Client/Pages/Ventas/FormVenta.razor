@inject NavigationManager NavigationManager
@inject HttpClient Http

<EditForm Model="@venta" OnValidSubmit="OnValidSubmit">
    <div class="form-field mt-2 mb-2">
         @*<div class="form-group row"> 
             <label class="col-3 col-form-label">Forma de Pago</label> 
             <div class="col"> 
                 <div class="input-group"> 
                     <InputSelect @bind-Value="(venta.FormaPago)" class="form-control"> 
                         @foreach (string fpago in Enum.GetNames(typeof(FormasPago))) 
                         { 
                             <option selected value="@fpago"> @fpago</option> 
                         } 
                     </InputSelect> 
                 </div> 
                 $1$ <ValidationMessage For="@(() => venta.FormaPago)" /> #1# 
             </div> 
         </div> *@

    <div class="form-group row" hidden="@ocultaclientes">
            <label class="col-3 col-form-label">Cliente</label>
            <div class="col">
                <div class="input-group">
                    <InputSelect @bind-Value="venta.ClienteId" class="form-control">
                        <option selected value="0">Seleccione cliente</option>
                        @foreach (var cliente in clientes)
                        {
                            <option value="@cliente.Id">@cliente.Nombre | Cédula:@cliente.Cedula</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => venta.ClienteId)" />
            </div>
        </div>

        <div class="form-group">
            @for (int i = 0; i < venta.DetalleVentas.Count; i++)
            {
                var indice = i;
                var detalle = venta.DetalleVentas[i];
                listadetalle = venta.DetalleVentas;

                <h5>Ítem #@(i + 1)</h5>

                @* <div class="card mb-2" style="background-color:lightgrey;border-radius:0.5rem;"> *@
                    <MudCard>
                    <div class="row">
                        <div class="col-12 form-group">
                            <div class="d-flex justify-content-between align-items-center m-1">
                                <label>Artículo</label>
                                <button type="button" @onclick="@(() => venta.DetalleVentas.RemoveAt(indice))" class="btn btn-danger btn-sm" style="border-radius:10px">
                                    <i class="oi oi-trash"></i><text style="color:white">Quitar ítem @(indice+1)</text>
                                </button>
                            </div>

                            <InputSelect @bind-Value="detalle.ArticuloId" required class="form-control">
                                <option selected value="">Seleccione un artículo</option>
                                @foreach (var articulo in articulos)
                                    {
                                        if (articulo.StockActual > 0)
                                        {
                                        <option value="@articulo.Id">@articulo.Nombre | C$ @articulo.PrecioUnitario | STOCK: @articulo.StockActual</option>
                                        }
                                    }
                            </InputSelect>
                           
                            <ValidationMessage For="@(() => detalle.ArticuloId)" />
                        </div>
                    </div>

                    @foreach (var art in articulos)
                    {
                        if (detalle.ArticuloId == art.Id)
                        {
                            cantidadmax = art.StockActual;
                            detalle.Precio = art.PrecioUnitario;
                        }
                    }

                    <div class="row">
                        <div class="col-4 form-group">
                            <label>Cantidad</label>
                            @* <InputNumber @bind-Value="detalle.Cantidad" class="form-control" min="1" max="@cantidadmax" /> *@
                            <MudNumericField @bind-Value="detalle.Cantidad" Label="Ingrese la cantidad" Variant="Variant.Outlined"
                            Min="1" Max="@cantidadmax"  />
                            <ValidationMessage For="@(() => detalle.Cantidad)" />
                        </div>

                        <div class="col-4 form-group">
                            <label>Descuento</label>
                            @* <InputNumber @bind-Value="detalle.Descuento" class="form-control" min="-100" max="100" /> *@
                            <MudNumericField @bind-Value="detalle.Descuento" Label="Ingrese el descuento por producto" Variant="Variant.Outlined"
                            Min="0" Max="100"  Step="5"/>
                            <ValidationMessage For="@(() => detalle.Descuento)" />
                        </div>

                        <div class="col-4">
                            <div class="d-flex justify-content-end mb-2 ml-2 mr-2">
                                <text>Subtotal</text>
                            </div>
                            <div class="d-flex justify-content-end mt-3 ml-2 mr-2">
                                <h4><b>@Math.Round(detalle.SubTotal,2)</b></h4>
                            </div>
                        </div>
                    </div>
                </MudCard>
            }

            <div class="btn-group">
                <button type="button" class="btn btn-success"
                        @onclick="@(() => venta.DetalleVentas.Add(new DetalleVenta()))">
                    Agregar ítem
                </button>
            </div>

            <div class="d-flex justify-content-end py-2">
                <button @onclick="@(() => CalcularTotal())" type="button" class="" style="border:none">
                    <h3><b>TOTAL: <br></b></h3>
                    @if (venta.Total != 0)
                    {

                        <h2><b><br>C$@Math.Round(venta.Total,2)</b></h2>
                    }
                </button>
            </div>

            <div class="btn-group btn-block">
                <button @onclick="@(() => CalcularTotal())" type="submit" class="btn btn-success"><i class="oi oi-check"></i><text style="color:white"> @textSubmit</text></button>
                <button @onclick="@Volver" class="btn btn-danger"><i class="oi oi-x"></i><text style="color:white"> Cancelar y volver atrás</text></button>
            </div>
        </div>
 </div>
    <DataAnnotationsValidator />
</EditForm>

@code {
    [Parameter] public Venta venta { get; set; } = new Venta();
    [Parameter] public List<Cliente> clientes { get; set; } = new List<Cliente>();
    [Parameter] public List<Articulo> articulos { get; set; } = new List<Articulo>();

    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public string textSubmit { get; set; }

    public decimal Iva = 15M / 100M;

    public bool ocultaclientes = false;

    public List<DetalleVenta> listadetalle { get; set; } = new List<DetalleVenta>();

    public int cantidadmax { get; set; } //cantidad maxima de un articulo por su stock

    decimal CalcularTotal()
    {
        venta.Total = 0;
        if (listadetalle.Count > 0)
        {
            @for (int i = 0; i < listadetalle.Count; i++)
            {
                venta.Total += listadetalle[i].SubTotalConDescuento;
            }
        }
        return venta.Total;
    }


    void Volver()
    {
        NavigationManager.NavigateTo("/lista-ventas");
    }
}