@page "/indexcategoria"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]

@using System.Text.Json

<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Color="Color.Success" Size="Size.Medium">
    <a style="text-decoration:none; color:#fff;"  @onclick="CrearArticulo">Agregar categoría</a>
</MudButton>

<div class="d-flex justify-content-between mt-2 mb-2">
    <div class="btn-group">
        <a href="/lista-categorias-bajas" style="background:none; border:none">
            &nbsp;&nbsp;<b>Dados de baja</b>
        </a>
    </div>
</div>


@if (Categoria == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Categoria.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{

    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudTooltip Text="Exportar esta tabla a excel" Color="Color.Tertiary" Placement="Placement.Bottom" Arrow="true">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel"
                   @onclick="ExportarExcel"
                   Color="Color.Warning">Excel</MudButton>
        </MudTooltip>
        <MudTooltip Text="Exportar esta tabla a CSV" Color="Color.Tertiary" Placement="Placement.Bottom" Arrow="true">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileDocument"
                   @onclick="ExportAsCSV"
                   Color="Color.Warning">CSV</MudButton>
        </MudTooltip>
    </MudButtonGroup>
    <MudTable Items="@Categoria" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Categoria,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Categorías</MudText>
            <MudSpacer />
            @*<MudTextField @bind-Value="searchString1" Placeholder="Buscar categoría..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>*@
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width:50px;">Nr</MudTh>
            <MudTh Class="thead-dark">Nombre</MudTh>
            <MudTh>Descripción</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
            <MudTd DataLabel="Descripción">@context.Descripcion</MudTd>
            <MudTd>
                <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small"
                        @onclick="@(() => NavigationManager.NavigateTo($"/editar-categoria/{context.Id}"))" />
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


}
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Categoria selectedItem1 = null;
    private HashSet<Categoria> selectedItems = new HashSet<Categoria>();


    public List<Categoria> Categoria { get; set; } //muestra todos los Categoria
    Categoria objCategoria = new Categoria();

    private string NombreArtFiltro = String.Empty; //filtros

    protected bool lista = false;
    protected bool card = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarArticulos();
    }

    async Task CargarArticulos()
    {
        var httpResponse = await Http.GetAsync($"api/cate");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Categoria = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    void CambiarVista()
    {
        lista = !lista;
        card = !card;
    }


    async Task MostrarTodos()
    {
        await CargarArticulos();
    }

    void CrearArticulo()
    {
        NavigationManager.NavigateTo("crearcategoria");
    }

    private async Task Filtrar()
    {
        await CargarArticulos();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await CargarArticulos();
    }

    private bool FilterFunc1(Categoria element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Categoria element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Descripcion.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    // exportando
    private void ExportAsCSV()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvHelper.CsvWriter(writer))
                {
                    csv.WriteRecords(Categoria);
                }

                var arr = memoryStream.ToArray();
                JS.GuardarComo($"Exportacion_CSV_Categorias_{DateTime.Now.ToShortDateString()}.CSV", arr);
            }
        }
    }

    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Categorías");
            worksheet.Cells["A1"].Value = "Caprichos.";
            using (ExcelRange r = worksheet.Cells["A1:D1"])
            {
                r.Merge = true; r.Style.Font.Bold = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
            }
            worksheet.Cells["A2"].Value = $"Informe de categorías {DateTime.Now.ToLongTimeString()}";
            using (ExcelRange r = worksheet.Cells["A2:D2"])
            {
                r.Merge = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightYellow);
            }

            var tableBody = worksheet.Cells["A3:D3"].LoadFromCollection(
    from f in Categoria
    select new { f.Id, f.Nombre, f.Descripcion, f.Estado }, true);

            var header = worksheet.Cells["A3:D3"];
            worksheet.DefaultColWidth = 32;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //  esto afectal cuerpo

            tableBody.Style.Fill.PatternType = ExcelFillStyle.None;
            // bordes
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Hair);
            worksheet.Cells.Style.Border.BorderAround(ExcelBorderStyle.Hair);

            // fuentes
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(System.Drawing.Color.Black);

            // Este es el encabezado.
            header.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);

            JS.GuardarComo($"Informe_Categorías_{DateTime.Now.ToShortDateString()}.xlsx", package.GetAsByteArray());
        }
    }
}