@page "/lista-proveedores-bajas"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]

@using System.Text.Json

<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Color="Color.Success" Size="Size.Medium">
    <a style="text-decoration:none; color:#fff;" @onclick="CrearArticulo">Agregar proveedor</a>
</MudButton>

<div class="d-flex justify-content-between mt-2 mb-2">
    <div class="btn-group">
        <a href="/lista-proveedores" style="background:none; border:none">
            &nbsp;&nbsp;<b>Proveedores activos</b>
        </a>
    </div>
</div>

@if (Proveedores == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Proveedores.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron proveedores dados de baja.</text>
    </div>
}
else
{
    <MudTable Items="@Proveedores" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Proveedores,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Align="Align.Center" Typo="Typo.h6">Proveedores dados de baja</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar proveedor..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>            
            <MudTh>Nombre</MudTh>
            <MudTh>Teléfono</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Dirección</MudTh>
            <MudTh>Fecha registro</MudTh>
            <MudTh Style="width:70px;">Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>            
            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
            <MudTd DataLabel="Teléfono">@context.Telefono</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Dirección">@context.Direccion</MudTd>
            <MudTd DataLabel="Fecha">@context.Fecha.ToLongDateString()</MudTd>
            <MudTd>
                <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small"
                        @onclick="@(() => NavigationManager.NavigateTo($"/editar-proveedores/{context.Id}"))" />
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


}
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Proveedores selectedItem1 = null;
    private HashSet<Proveedores> selectedItems = new HashSet<Proveedores>();


    public List<Proveedores> Proveedores { get; set; } //muestra todos los Categoria
    Proveedores objMarca = new Proveedores();

    private string NombreArtFiltro = String.Empty; //filtros

    protected bool lista = false;
    protected bool card = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarProveedores();
    }

    async Task CargarProveedores()
    {
        var httpResponse = await Http.GetAsync($"api/proveedores/bajas");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Proveedores = JsonSerializer.Deserialize<List<Proveedores>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    void CambiarVista() //  esta parte cambia entre vista de tarjetas o vista de grilla
    {
        lista = !lista;
        card = !card;
    }


    async Task MostrarTodos()
    {
        await CargarProveedores();
    }

    void CrearArticulo()
    {
        NavigationManager.NavigateTo("crearproveedores");
    }

    private async Task Filtrar()
    {
        await CargarProveedores();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await CargarProveedores();
    }

    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Proveedores element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Proveedores element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}