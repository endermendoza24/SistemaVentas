@page "/ver-ventadetalle/{idventa:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin, empleado")]
@using System.Text.Json

<h1> Detalle de venta </h1>

<div class="d-flex justify-content-between mb-2">
    <div class="btn-group">
        <button id="miboton" class="btn btn-sm btn-secondary" @onclick="@Volver">
            <i class="oi oi-arrow-circle-left"></i> Volver atrás
        </button>      
    </div>
    <div class="btn-group">
    </div>
</div>
@if (venta != null)
{
    <div class="card m-1" style="border-color: #fff; border-style: dotted; box-shadow: 22px 3px 39px 1px rgba(0,0,0,0.51);">
        <div class="card-body">

            <table class="table table-striped">
                <thead class="thead-dark">
                    <tr style="font-weight:bold">
                        <th>Descripción</th>
                        <th>Precio x un.</th>
                        <th>Cantidad</th>
                        <th>Descuento</th>
                        <th>Iva(15 %)</th>
                        <th>Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in venta.DetalleVentas)
                    {
                        <tr>
                            <td style="text-transform:uppercase"><small>@item.Articulo.Nombre</small></td>
                            <td><small>C$ @item.Precio</small></td>
                            <td><small>@item.Cantidad</small></td>
                            <td><small>@item.Descuento %</small></td>
                            <td><small>C$ @item.IvaAlternativo.ToString("#.##") </small></td>
                            <td><small>C$ @item.SubTotal</small></td>
                        </tr>
                    }
                </tbody>
            </table>

            <p class="card-text text-right m-4">
                <h6><b>TOTAL</b></h6>
                <h5><b>C$ @venta.Total</b></h5>
            </p>
        </div>
    </div>
}

@code {
    public Venta venta { get; set; }
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private Venta selectedItem1 = null;

    [Parameter] public int idventa { get; set; }

    public Configuracion ListaAjustes { get; set; }
    public DetalleVenta ListaDetalle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await Http.GetAsync($"api/ventas/{idventa}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            venta = JsonSerializer.Deserialize<Venta>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            await JS.InvokeVoidAsync("simple", "Error", "Venta no encontrada.", "error");
            NavigationManager.NavigateTo("lista-ventas");
        }
        await CargarAjustes();

    }



    void Volver()
    {
        NavigationManager.NavigateTo("lista-caja");
    }

    async Task CargarAjustes()
    {
        var httpResponse = await Http.GetAsync($"api/configuracion/1");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            ListaAjustes = JsonSerializer.Deserialize<Configuracion>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            await JS.InvokeVoidAsync("simple", "Error", "Venta no encontrada.", "error");
            NavigationManager.NavigateTo("lista-ventas");
        }
    }

}