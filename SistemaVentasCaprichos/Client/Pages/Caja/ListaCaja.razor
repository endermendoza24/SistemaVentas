@page "/listado-caja"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JS
@using System.Globalization;

<div class="d-flex position-sticky justify-content-between mb-1">   
    <div class="input-group" style="width:60%">
        <input class="form-control" type="date" placeholder="Fecha venta" @bind="FechaFiltro" />
       @* <input class="form-control" type="text" placeholder="Nombre empleado" @bind="EmpleadoFiltro" />*@
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

@if (caja == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border-sm text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (caja.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontró ninguna caja.</text>
    </div>
}
else
{
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudTooltip Text="Exportar esta tabla a excel" Color="Color.Tertiary" Placement="Placement.Bottom" Arrow="true">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel"
                   @onclick="ExportarExcel"
                   Color="Color.Warning">Excel</MudButton>
        </MudTooltip>
    </MudButtonGroup>

    <MudTable Items="@caja" GroupFooterClass="mb-4" GroupBy="@_groupDefinition" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Caja,bool>(FilterFunc1)"
          @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Entradas/salidas</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh Style="width:50px;">Nr</MudTh>
            <MudTh>Fecha</MudTh>
            <MudTh>Entrada</MudTh>
            <MudTh>Salida</MudTh>
            <MudTh>Saldo</MudTh>            
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Style="display:none" Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
            </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Fecha">@context.Fecha.ToLongDateString()</MudTd>
            <MudTd DataLabel="Ingresos">@context.Ingresos.ToString("C",CultureInfo.CreateSpecificCulture("ni-NI"))</MudTd>
            <MudTd DataLabel="Egresos">
                @context.Egresos.ToString("C",CultureInfo.CreateSpecificCulture("ni-NI"))
            </MudTd>
            @if(context.Saldo < 0 )
            {
                <MudTd Style="color:red" DataLabel="Saldo">@context.Saldo.ToString("C",CultureInfo.CreateSpecificCulture("ni-NI"))</MudTd>
            }
            else
            {
                <MudTd Style="color:green" DataLabel="Saldo">@context.Saldo.ToString("0,0.00"))</MudTd>
            }
            
        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">
                <div style="color:red;font-size:20px;font-weight:700;">Saldo total: @context.Items.Sum((e) => e.Saldo)</div>
            </MudTh>
        </GroupFooterTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    public List<Caja> caja { get; set; }

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Caja selectedItem1 = null;
    private HashSet<Caja> selectedItems = new HashSet<Caja>();

    private DateTime FechaFiltro = DateTime.Today;

    private TableGroupDefinition<Caja> _groupDefinition = new()
        {
            GroupName = "Fecha",
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.Fecha.ToLongDateString()
        };

    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarCaja();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task CargarCaja()
    {
        string fecha = Convert.ToString(FechaFiltro);

        var httpResponse = await Http.GetAsync($"api/caja/filtro?fecha={fecha}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            caja = JsonSerializer.Deserialize<List<Caja>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error en caja");
        }
    }
 

    void CrearVenta()
    {
        NavigationManager.NavigateTo("crear-caja");
    }

    private async Task Filtrar()
    {
        await CargarCaja();
    }

    private async Task Limpiar()
    {
        FechaFiltro = DateTime.Today;
        await CargarCaja();
    }

    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Caja element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Caja element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Fecha.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Caja");
            worksheet.Cells["A1"].Value = "Tienda Caprichos.";
            using (ExcelRange r = worksheet.Cells["A1:E1"])
            {
                r.Merge = true; r.Style.Font.Bold = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
            }
            worksheet.Cells["A2"].Value = $"Salidas / Entradas de dinero en caja {DateTime.Now.ToLongTimeString()}";
            using (ExcelRange r = worksheet.Cells["A2:E2"])
            {
                r.Merge = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightYellow);
            }

            var tableBody = worksheet.Cells["A3:D3"].LoadFromCollection(
    from f in caja
    select new { f.Id, f.Fecha, f.Ingresos, f.Egresos, f.Saldo }, true);

            var header = worksheet.Cells["A3:E3"];
            worksheet.DefaultColWidth = 32;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //  esto afectal cuerpo

            tableBody.Style.Fill.PatternType = ExcelFillStyle.None;
            // bordes
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Hair);
            worksheet.Cells.Style.Border.BorderAround(ExcelBorderStyle.Hair);

            // fuentes
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(System.Drawing.Color.Black);

            // Este es el encabezado.
            header.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);

            JS.GuardarComo($"Informe_EntradasSalidas_{DateTime.Now.ToShortDateString()}.xlsx", package.GetAsByteArray());
        }
    }
}