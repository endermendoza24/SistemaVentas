@page "/crear-pago"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@attribute [Authorize]
<h3><b>Nuevo pago</b></h3>

<FormPago textSubmit=" Finalizar pago" OnValidSubmit="CreaPago" pago="pago"
                     clientes="clientes"></FormPago>

@code {
    public Pago pago = new Pago();
    public List<Cliente> clientes { get; set; } = new List<Cliente>();

    protected override async Task OnInitializedAsync()
    {
        clientes = await Http.GetFromJsonAsync<List<Cliente>>("api/clientes"); //muestro todos los clientes
    }

    async Task CreaPago()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "¿Confirmar pago?",
            $"Cliente {pago.ClienteId}. Importe: ${pago.Importe}. Forma de pago: {pago.FormaPago}.", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PostAsJsonAsync("api/pagos", pago);
            var cuerporespuest = await respuesta.Content.ReadAsStringAsync();

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/ver-pago/" + cuerporespuest);
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Pago finalizado", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", "No se pudo realizar pago", "error");
            }
        }
    }
}