@page "/lista-articulos"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin, empleado")]

@using System.Text.Json

<div class="d-flex position-sticky justify-content-between">
    <AuthorizeView Roles="admin">
        <Authorized>
            <div class="btn-group mr-2">
                <button @onclick="CrearArticulo" class="btn btn-success"><i class="oi oi-plus"></i> Agregar articulo</button>
            </div>
        </Authorized>
    </AuthorizeView>
    <div class="input-group" style="width:60%">
        <input class="form-control" type="text" placeholder="Nombre artículo" @bind="NombreArtFiltro" />
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between mt-2 mb-2">
    <div class="btn-group">
        <button @onclick="MostrarTodos" style="background:none; border: none">
            &nbsp;&nbsp;<b>Ver todos</b>&nbsp;&nbsp;
        </button>
        <button @onclick="MostrarStockBajo" style="background:none; border: none">
            &nbsp;&nbsp;<b>Sólo con bajo stock</b>
        </button>
        <a href="/lista-articulos-bajas" style="background:none; border:none">
            &nbsp;&nbsp;<b>Dados de baja</b> &nbsp;&nbsp;
        </a>
    </div>

    <div class="btn-group">
        <button @onclick="CambiarVista" style="background:none; border: none">
            <b>Ver como tabla</b>
        </button>
    </div>
</div>
<MudTooltip Text="Exportar esta tabla a excel" Color="Color.Tertiary" Placement="Placement.Bottom" Arrow="true">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel"
               @onclick="ExportarExcel"
               Color="Color.Warning">Excel</MudButton>
</MudTooltip>
@if (articulo == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (articulo.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{
    <div class="card-columns" hidden="@card">
        @foreach (var articulo in articulo)
        {
            <a href="/editar-articulo/@articulo.Id" style="color: inherit">
                <div class="card">
                    @if (articulo.Url_Imagen == null || articulo.Url_Imagen == "")
                    {
                        <img class="card-img-top" src="img/noimage.png" alt="Card image cap">
                    }
                    else
                    {
                        <img class="card-img-top" src="@articulo.Url_Imagen" alt="Card image cap">
                    }
                    <div class="card-body">
                        <h5 class="card-title">
                            <b>@articulo.Nombre</b>
                        </h5>
                        <p class="card-subtitle">
                            @articulo.Categorias
                        </p>
                        <p class="card-text">
                            PRECIO: <b>C$@articulo.PrecioUnitario</b>
                            <br />
                            @if (articulo.StockActual < articulo.StockMinimo)
                            {
                                <b style="color:darkred">STOCK BAJO: @articulo.StockActual</b>
                            }
                            else if (articulo.StockActual > articulo.StockMaximo)
                            {
                                <b style="color:darkorange">STOCK EXCEDIDO: @articulo.StockActual</b>
                            }
                            else
                            {
                                <b style="color:green">STOCK: @articulo.StockActual</b>
                            }
                        </p>
                    </div>
                </div>
            </a>
        }
    </div>
    <div hidden="@lista">
        <MudTable Items="@articulo" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Articulo,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Artículos</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Buscar artículo..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="width:50px;">Nr</MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh>Descripción</MudTh>
                <MudTh>Precio</MudTh>
                <MudTh>Fecha alta</MudTh>
                <MudTh>Stock</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd DataLabel="Descripción">@context.Descripcion</MudTd>
                <MudTd DataLabel="Precio">@context.PrecioUnitario</MudTd>
                <MudTd DataLabel="Fecha">@context.Ultima_Modificación.ToShortDateString()</MudTd>
                <MudTd>
                    @if (context.StockActual < context.StockMinimo)
                    {
                        <MudChip Color="Color.Error" Variant="Variant.Filled">
                            <MudTd Style="color:#fff" DataLabel="Stock bajo">@context.StockActual</MudTd>
                        </MudChip>
                    }
                    else if (context.StockActual > context.StockMaximo)
                    {
                        <MudChip Color="Color.Warning" Variant="Variant.Filled">
                            <MudTd Style="color:#fff" DataLabel="Stock excedido"> @context.StockActual</MudTd>
                        </MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Success" Variant="Variant.Filled">
                            <b><MudTd Style="color:#fff" DataLabel="Stock"> @context.StockActual</MudTd></b>
                        </MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small"
                        @onclick="@(() => NavigationManager.NavigateTo($"/editar-articulo/{context.Id}"))" />
                </MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>

}

@code {
    public List<Articulo> articulo { get; set; } //muestra todos los articulos
    public List<Categoria> ListaCategorias { get; set; } = new List<Categoria>();

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Articulo selectedItem1 = null;
    private HashSet<Articulo> selectedItems = new HashSet<Articulo>();

    private string NombreArtFiltro = String.Empty; //filtros

    protected bool lista = true;
    protected bool card = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarArticulos();
    }

    async Task CargarArticulos()
    {
        var httpResponse = await Http.GetAsync($"api/articulos/filtro?nombre={NombreArtFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            articulo = JsonSerializer.Deserialize<List<Articulo>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }


    void CambiarVista()
    {
        lista = !lista;
        card = !card;
    }

    void MostrarStockBajo()
    {
        articulo = articulo.Where(x => x.StockActual < x.StockMinimo).ToList();
    }

    async Task MostrarTodos()
    {
        await CargarArticulos();
    }

    void CrearArticulo()
    {
        NavigationManager.NavigateTo("crear-articulo");
    }

    private async Task Filtrar()
    {
        await CargarArticulos();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await CargarArticulos();
    }

    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Articulo element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Articulo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Descripcion.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Artículos");
            worksheet.Cells["A1"].Value = "Caprichos.";
            var tableBody = worksheet.Cells["A3:E3"].LoadFromCollection(
                from f in articulo
                select new { f.Id, f.Nombre, f.Descripcion, f.Codigo, f.PrecioMayorista, f.PrecioUnitario, f.Estado }, true);
            using (ExcelRange r = worksheet.Cells["A1:H1"])
            {
                r.Merge = true; r.Style.Font.Bold = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
            }
            worksheet.Cells["A2"].Value = $"Informe de artículos en existencia {DateTime.Now.ToLongTimeString()}";
            using (ExcelRange r = worksheet.Cells["A2:H2"])
            {
                r.Merge = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightYellow);
            }


            var header = worksheet.Cells["A3:H3"];
            worksheet.DefaultColWidth = 32;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //  esto afecta al cuerpo

            tableBody.Style.Fill.PatternType = ExcelFillStyle.None;
            // bordes
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Hair);
            worksheet.Cells.Style.Border.BorderAround(ExcelBorderStyle.Hair);

            // fuentes
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(System.Drawing.Color.Black);

            // Este es el encabezado.
            header.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);

            JS.GuardarComo($"Informe_Artículos_{DateTime.Now.ToShortDateString()}.xlsx", package.GetAsByteArray());
        }
    }
}