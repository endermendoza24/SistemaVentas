@page "/lista-articulos-bajas"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin, empleado")]
@using System.Text.Json

<div class="d-flex position-sticky justify-content-between">
   <AuthorizeView Roles="admin">
       <Authorized>
            <div class="btn-group mr-2">
                <button @onclick="CrearArticulo" class="btn btn-success"><i class="oi oi-plus"></i> Agregar artículo</button>
            </div>
       </Authorized>
   </AuthorizeView>
    <div class="input-group" style="width:60%">
        <input class="form-control" type="text" placeholder="Nombre artículo" @bind="NombreArtFiltro" />
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between mt-2 mb-2">
    <div class="btn-group">
        <a href="/lista-articulos" style="background:none; border: none">
            <b>Volver a artículos</b>
        </a>        
    </div>    
</div>

@if (articulo == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (articulo.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{        
        <MudTable Items="@articulo" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Articulo,bool>(FilterFunc1)"
                  @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Artículos</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Buscar artículo..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>                
                <MudTh>Nombre</MudTh>
                <MudTh>Descripción</MudTh>
                <MudTh>Precio</MudTh>
                <MudTh>Fecha alta</MudTh>
                <MudTh>Stock</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>               
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd DataLabel="Descripción">@context.Descripcion</MudTd>
                <MudTd DataLabel="Precio">C$ @context.PrecioUnitario</MudTd>
                <MudTd DataLabel="Fecha">@context.Ultima_Modificación.ToLongDateString()</MudTd>
            <MudTd>
                @if (context.StockActual < context.StockMinimo)
                {
                    <div class="chip chip-low">@context.StockActual</div>
                }
                else if (context.StockActual > context.StockMaximo)
                {                    
                    <div class="chip chip-ex">@context.StockActual</div>
                }
                else
                {                    
                    <div class="chip chip-normal">@context.StockActual</div>
                }
            </MudTd>     
            
            <AuthorizeView Roles="admin">
                <Authorized Context="contexto">
                    <MudTd>
                        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small"
                            @onclick="@(() => NavigationManager.NavigateTo($"/editar-articulo/{context.Id}"))" />
                    </MudTd>
                </Authorized>
            </AuthorizeView>

            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>    
}
@code {
    public List<Articulo> articulo { get; set; } //muestra todos los articulos
    public List<Categoria> ListaCategorias { get; set; } = new List<Categoria>();

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Articulo selectedItem1 = null;
    private HashSet<Articulo> selectedItems = new HashSet<Articulo>();

    private string NombreArtFiltro = String.Empty; //filtros


    protected override async Task OnInitializedAsync()
    {
        await CargarArticulos();
    }
    async Task CargarArticulos()
    {
        var httpResponse = await Http.GetAsync($"api/articulos/bajas?nombre={NombreArtFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            articulo = JsonSerializer.Deserialize<List<Articulo>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }
    void CrearArticulo()
    {
        NavigationManager.NavigateTo("crear-articulo");
    }

    private async Task Filtrar()
    {
        await CargarArticulos();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await CargarArticulos();
    }
    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Articulo element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Articulo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
