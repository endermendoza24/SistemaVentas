@inject HttpClient Http
@inject NavigationManager NavigationManager

@using System.Text.Json

<EditForm Model="@articulo" OnValidSubmit="@OnValidSubmit">
    <div class="form-field mt-2 mb-2">
        <div class="row">
            <div class="col-6">
                <div class="form-group row">
                    <label class="col-4 col-form-label">Imagen</label>
                    <div class="col">
                        <div class="figure-img">
                            <a href="@articulo.Url_Imagen" target="_blank"><img width="110" height="105" style="border-radius: 0.5rem;" src="@articulo.Url_Imagen" alt="No img" /></a>
                        </div>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-4 col-form-label">Nombre</label>
                    <div class="col">
                        <div class="input-group">
                            <InputText @bind-Value="@articulo.Nombre" oninput="this.value=this.value.toUpperCase()" placeholder="Nombre artículo" class="form-control" />
                        </div>
                        <ValidationMessage For="@(() => articulo.Nombre)" />
                    </div>
                </div>



                @*prueba*@
                <div class="form-group row">
                    <label class="col-4 col-form-label">Categorías</label>
                    <div class="col">
                        <div class="input-group">
                            <InputSelect @bind-Value="articulo.CategoriaId" class="form-control">
                                <option selected value="0">Seleccione una categoría</option>
                                @foreach (var categoria in ListaCategorias)
                                {
                                    <option value="@categoria.Id">@categoria.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(() => articulo.CategoriaId)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-4 col-form-label">Marcas</label>
                    <div class="col">
                        <div class="input-group">
                            <InputSelect @bind-Value="articulo.MarcaId" class="form-control">
                                <option selected value="0">Seleccione una marca</option>
                                @foreach (var marca in ListaMarcas)
                                {
                                    <option value="@marca.Id">@marca.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(() => articulo.MarcaId)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-4 col-form-label">Tallas</label>
                    <div class="col">
                        <div class="input-group">
                            <InputSelect @bind-Value="articulo.TallasId" class="form-control">
                                <option disabled selected value="0">Seleccione una talla</option>
                                @foreach (var talla in ListaTallas)
                                {
                                    <option value="@talla.Id">@talla.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(() => articulo.TallasId)" />
                    </div>
                </div>

                @*finPrueba*@

                <div class="form-group row">
                    <label class="col-4 col-form-label">Descripción</label>
                    <div class="col">
                        <div class="input-group">
                            @*<InputText @bind-Value="@articulo.Descripcion" oninput="this.value=this.value.toUpperCase()" placeholder="Descripción" class="form-control" />*@
                            <InputTextArea @bind-Value="@articulo.Descripcion" oninput="this.value=this.value.toUpperCase()" placeholder="Descripción" class="form-control" />
                            <ValidationMessage For="@(() => articulo.Descripcion)" />
                        </div>
                    </div>
                </div>                                            

                <div class="form-group row">
                    <label class="col-4 col-form-label">Url Imagen</label>
                    <div class="col">
                        <div class="input-group">
                            <MudTooltip Text="Ingrese el enlace de la imagen que quiere que se muestre" Color="Color.Tertiary" Placement="Placement.Bottom" Arrow="true">
                                <InputText @bind-Value="@articulo.Url_Imagen" placeholder="URL Imagen" class="form-control" />
                            </MudTooltip>
                            <div class="input-group-prepend">
                                <button @onclick="@(() => articulo.Url_Imagen = null)" class="btn btn-secondary" type="button">
                                    <i class="oi oi-delete"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-6">
                <div class="form-group row">
                    <label class="col-4 col-form-label">Código producto</label>
                    <div class="col">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">#A-Z</span>
                            </div>
                            <InputText @bind-Value="@articulo.Codigo" class="form-control" />
                        </div>
                        <ValidationMessage For="@(() => articulo.Codigo)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-4 col-form-label">Precio de compra</label>
                    <div class="col">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                            </div>
                            <InputNumber @bind-Value="@articulo.PrecioMayorista" class="form-control" step="1" min="0" />
                        </div>
                        <ValidationMessage For="@(() => articulo.PrecioMayorista)" />
                    </div>
                </div>

                @* <div class="form-group row">
                <label class="col-4 col-form-label">Porcentaje</label>
                <div class="col">
                <div class="input-group">
                <InputNumber @bind-Value="@porcentaje" @onfocusout="@(() => articulo.CalcularUnitario(porcentaje))" class="form-control" />
                <div class="input-group-append">
                <span class="input-group-text">%</span>
                </div>
                </div>
                </div>
                </div> *@

                <div class="form-group row">
                    <label class="col-4 col-form-label">Precio de venta</label>
                    <div class="col">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">$</span>
                            </div>
                            <InputNumber @bind-Value="@articulo.PrecioUnitario" class="form-control" step="1" min="0" />
                        </div>
                        <ValidationMessage For="@(() => articulo.PrecioUnitario)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-4 col-form-label">Stock actual</label>
                    <div class="col">
                        <div class="input-group">
                            <InputNumber @bind-Value="@articulo.StockActual" min="0" class="form-control" type="number"  />
                        </div>
                        <ValidationMessage For="@(() => articulo.StockActual)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-4 col-form-label">Stock mínimo</label>
                    <div class="col">
                        <div class="input-group">
                            <InputNumber @bind-Value="@articulo.StockMinimo" min="0" class="form-control" type="number" />
                        </div>
                        <ValidationMessage For="@(() => articulo.StockMinimo)" />
                    </div>
                </div>

              @*  <div class="form-group row">
                    <label class="col-4 col-form-label">Stock máximo</label>
                    <div class="col">
                        <div class="input-group">
                            <InputNumber @bind-Value="@articulo.StockMaximo" min="0" class="form-control" type="number" />
                        </div>
                        <ValidationMessage For="@(() => articulo.StockMaximo)" />
                    </div>
                </div>*@

                <div class="form-group row">
                    <label class="col-3 col-form-label">Estado</label>
                    <div class="col">
                        <MudTooltip Text="Si selecciona esta opción dará de baja al artículo correspondiente."
                                    Color="Color.Secondary" Placement="Placement.Top">
                            <MudSwitch @bind-Checked="@articulo.Estado" Label="Está activo?"
                                       Color="Color.Success" />
                        </MudTooltip>
                        <ValidationMessage For="@(() => articulo.Estado)" />
                    </div>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-block btn-success">
            <i class="oi oi-check "></i>
            <text style="color:white" > @TextBotonSubmit</text>
        </button>
    </div>
    <DataAnnotationsValidator />
</EditForm>

@code {
    [Parameter] public Articulo articulo { get; set; } = new Articulo();
    [Parameter] public List<Categoria> ListaCategorias { get; set; } = new List<Categoria>();
    [Parameter] public List<Marcas> ListaMarcas { get; set; } = new List<Marcas>();
    [Parameter] public List<Tallas> ListaTallas { get; set; } = new List<Tallas>();
    [Parameter] public string TextBotonSubmit { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    public int porcentaje { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarCategoria();
        await CargarMarcas();
        await CargarTallas();
    }

    async Task CargarCategoria()
    {
        //  usando la api que está en el controlador se usa para  llenar el select que está más arriba
        var httpResponse = await Http.GetAsync("api/cate");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            ListaCategorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error - No se obtuvieron las categorías");
        }

    }
    // obteniendo las marcas
    async Task CargarMarcas()
    {
        //  usando la api que está en el controlador se usa para  llenar el select que está más arriba
        var httpResponse = await Http.GetAsync("api/marcas"); //  a través del get se llena la lista con los elementos d ela tabla marcas
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            ListaMarcas = JsonSerializer.Deserialize<List<Marcas>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error - No se obtuvieron las marcas");
        }

    }
    // obteniendo las tallas
    async Task CargarTallas()
    {
        //  usando la api que está en el controlador se usa para  llenar el select que está más arriba
        var httpResponse = await Http.GetAsync("api/tallas"); //  a través del get se llena la lista con los elementos d ela tabla marcas
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            ListaTallas = JsonSerializer.Deserialize<List<Tallas>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error - No se obtuvieron las tallas");
        }

    }
}