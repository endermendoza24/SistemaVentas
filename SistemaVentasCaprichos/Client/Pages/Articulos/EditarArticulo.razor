@page "/editar-articulo/{idarticulo:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "admin")]

<button @onclick="@Volver" class="btn btn-sm btn-secondary">
    <i class="oi oi-arrow-circle-left"></i> Volver al listado
</button>

<hr />

<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar artículo</b></h3>
    <div>

      @*  <MudTooltip>
            <ChildContent>
                <button @onclick="@(() => BorrarArticulo(articulo.Id))" class="btn btn-sm btn-danger">
                    <i class="oi oi-trash"></i> Eliminar artículo
                </button>
            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.h6">ALERTA</MudText>
                <MudText Typo="Typo.body2">
                    Esta opción eliminará este elemento de forma
                    permanente
                </MudText>
                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" />
            </TooltipContent>
        </MudTooltip>*@


    </div>
</div>

<FormArticulo TextBotonSubmit="Guardar cambios"
              OnValidSubmit="@EditarArtic" articulo="@articulo" />

@code {
    Articulo articulo = new Articulo();
    [Parameter] public int idarticulo { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        articulo = await Http.GetFromJsonAsync<Articulo>($"/api/articulos/{idarticulo}");
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/lista-articulos");
    }

    async Task EditarArtic()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {articulo.Nombre}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync("/api/articulos", articulo);

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-articulos");
                //await JS.InvokeVoidAsync("simple", "¡Éxito!", "Artículo editado", "success");
                Snackbar.Add("Editado con éxito", Severity.Success, a => a.VisibleStateDuration = 200);
            }
            else
            {
                // await JS.InvokeVoidAsync("simple", "Error",
                // "No se pudo editar artículo", "error");
                Snackbar.Add("Ha ocurrido un error", Severity.Error, a =>
         a.VisibleStateDuration = 200);
            }
        }
    }

    async Task BorrarArticulo(int idarticulo)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar {articulo.Nombre}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"/api/articulos/{idarticulo}");

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-articulos");
                //await JS.InvokeVoidAsync("simple", "¡Éxito!", "Artículo eliminado", "success");
                Snackbar.Add("Borrado con éxito", Severity.Success, a => a.VisibleStateDuration = 200);
            }
            else
            {

                Snackbar.Add("Ha ocurrido un error", Severity.Error, a =>
         a.VisibleStateDuration = 200);
                //await JS.InvokeVoidAsync("simple", "Error",
                //"No se pudo eliminar artículo", "error");
            }
        }
    }
}
