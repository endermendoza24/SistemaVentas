@page "/editar-tallas/{idTallas:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar


<button @onclick="@Volver" class="btn btn-sm btn-secondary">
    <i class="oi oi-arrow-circle-left"></i> Volver al listado
</button>

<hr />

<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar tall</b></h3>
    <div>       
        <MudTooltip>
            <ChildContent>
                <button @onclick="@(() => BorrarArticulo(Tallas.Id))" class="btn btn-sm btn-danger">
                    <i class="oi oi-trash"></i> Eliminar talla
                </button>
            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.h6">ALERTA</MudText>
                <MudText Typo="Typo.body2">Esta opción eliminará este elemento de forma permanente</MudText>
                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" />               
            </TooltipContent>
        </MudTooltip>
    </div>
</div>
<FormTallas TextBotonSubmit="Guardar cambios"
            OnValidSubmit="@EditarArtic" Tallas="@Tallas" />
@code {
    Tallas Tallas = new Tallas();
    [Parameter] public int idTallas { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        Tallas = await Http.GetFromJsonAsync<Tallas>($"/api/tallas/{idTallas}");
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/lista-tallas");
    }

    async Task EditarArtic()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {Tallas.Nombre}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync("/api/tallas", Tallas);

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-tallas");
                //await JS.InvokeVoidAsync("simple", "¡Éxito!", "Marca editada", "success");
                Snackbar.Add("Editada con éxito", Severity.Info, a => a.VisibleStateDuration = 200);
            }
            else
            {
                //await JS.InvokeVoidAsync("simple", "Error",
                //    "No se pudo editar la talla", "error");
                Snackbar.Add("Hubo un error editando este elemento", Severity.Error, a => a.VisibleStateDuration = 300);
            }
        }
    }

    async Task BorrarArticulo(int idCategoria)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar {Tallas.Nombre}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"/api/tallas/{Tallas.Id}");

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-tallas");
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Talla eliminada", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    "No se pudo eliminar la talla", "error");
            }
        }
    }
}
