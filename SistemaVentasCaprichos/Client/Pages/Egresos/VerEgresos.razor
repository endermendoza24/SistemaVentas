@page "/ver-egresos"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin, empleado")]
@using System.Text.Json

<div class="d-flex position-sticky justify-content-between mb-1">
    <div class="btn-group mr-2">
        <button @onclick="CrearEgresos" class="btn btn-success"><i class="oi oi-plus"></i> Nueva egresos</button>
    </div>
    <div class="input-group" style="width:60%">
        <input class="form-control" type="date" placeholder="Fecha egresos" @bind="FechaFiltro" />
        <input class="form-control" type="text" placeholder="Nombre empleado" @bind="EmpleadoFiltro" />
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

@if (egresos == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (egresos.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron egresos.</text>
    </div>
}
else
{    
    <MudTable Items="@egresos" Hover="true" Breakpoint="Breakpoint.Sm" Bordered="@bordered" Striped="@striped" Filter="new Func<Egresos,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Egresos</MudText>
        <MudSpacer />
        @*<MudTextField @bind-Value="searchString1" Placeholder="Buscar..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
    </ToolBarContent>
	<ColGroup>
		<col style="width:300px;" />
		<col style="width:50px;" />
		<col/>
		<col/>
	</ColGroup>
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh>Nr</MudTh>
		<MudTh>Fecha</MudTh>
        <MudTh>Categoría</MudTh>
		<MudTh>Descripción</MudTh>
		<MudTh>Empleado</MudTh>
		<MudTh>Total</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.Estado == true)? "Ocultar" : "Mostrar") Detalles de egreso</MudButton></MudTd>
		 <MudTd DataLabel="Id">@context.Id</MudTd>
		
		<MudTd DataLabel="Fecha">@context.Fecha.ToLongDateString()</MudTd>
            <MudTd DataLabel="Categoría">@context.CategoriaEgreso</MudTd>
		<MudTd DataLabel="Detalle">@context.Detalles</MudTd>
		<MudTd DataLabel="Empleado">@context.ApplicationUser.NombreyApellido @context.ApplicationUser.Apellido</MudTd>
		<MudTd DataLabel="Total">@context.Total</MudTd>
	</RowTemplate>
	<ChildRowContent>
		@if (context.Estado)
				{
  <MudTr>
   <td colspan="4">
	<MudCard Elevation="0">
	 <MudCardHeader>
	  <CardHeaderContent>
	   <MudText Typo="Typo.body1">Detalle de egresos para <strong>@context.Id</strong></MudText>
	  </CardHeaderContent>
	 </MudCardHeader>
	 <MudCardContent Class="pa-0">
	  <MudTable Items="@context.DetalleEgresos" Context="detalleContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
	   <ColGroup>
		<col />
		<col />
		<col style="width:200px;" />
	   </ColGroup>
	   <HeaderContent>
		<MudTh>Cantidad</MudTh>
		<MudTh>Monto pagado</MudTh>
		<MudTh>Subtotal</MudTh>
	   </HeaderContent>
	   <RowTemplate>
		<MudTd DataLabel="Cantidad">@detalleContext.Cantidad</MudTd>
		<MudTd DataLabel="Monto">C$ @detalleContext.Monto</MudTd>
		 <MudTd DataLabel="Subtotal">C$ @detalleContext.SubTotal</MudTd> 
	   </RowTemplate>
	  </MudTable>
	 </MudCardContent>
	</MudCard>
   </td>
  </MudTr>
		}
	</ChildRowContent>
</MudTable>
}

@code {
    public List<Egresos> egresos { get; set; }

    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Egresos selectedItem1 = null;
    private HashSet<Egresos> selectedItems = new HashSet<Egresos>();

    private DateTime FechaFiltro = DateTime.Today.AddDays(+1);
    private string EmpleadoFiltro = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarEgresos();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task CargarEgresos()
    {
        string fecha = Convert.ToString(FechaFiltro);

        var httpResponse = await Http.GetAsync($"api/egresos/filtro?empleado={EmpleadoFiltro}&fecha={fecha}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            egresos = JsonSerializer.Deserialize<List<Egresos>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error en el get");
        }
    }

    void CrearEgresos()
    {
        NavigationManager.NavigateTo("crear-egresos");
    }

    private async Task Filtrar()
    {
        await CargarEgresos();
    }

    private async Task Limpiar()
    {
        EmpleadoFiltro = string.Empty;
        FechaFiltro = DateTime.Today.AddDays(+1);
        await CargarEgresos();
    }
    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Egresos element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Egresos element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Fecha.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ApplicationUser.NombreyApellido.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
	
	public void ShowBtnPress(int nr)
	{
		Egresos tmpPerson = egresos.First(f => f.Id == nr);
		tmpPerson.Estado = !tmpPerson.Estado;
	}
}