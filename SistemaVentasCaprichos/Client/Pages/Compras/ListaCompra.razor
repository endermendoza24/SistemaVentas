@page "/lista-compras"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


@using System.Text.Json

<div class="d-flex position-sticky justify-content-between mb-1">
    <div class="btn-group mr-2">
        <button @onclick="CrearCompra" class="btn btn-success"><i class="oi oi-plus"></i> Nueva compra</button>
    </div>   
</div>

@if (compras == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (compras.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron compras.</text>
    </div>
}
else
{
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th></th>
                <th>#</th>
                <th>Fecha</th>
                <th>Proveedor</th>                
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="@compras" Context="compra">
                <tr @key="compra.Id">
                    <td><a href="ver-compra/@compra.Id" class="btn btn-sm btn-primary"><i class="oi oi-eye"></i> Ver</a></td>
                    <td>@compra.Id</td>
                    <td>@compra.Fecha.ToLongDateString()</td>                    
                    <td>@compra.Proveedores.Nombre</td>                    
                    <td><b>C$@compra.Total</b></td>
                </tr>
            </Virtualize>
        </tbody>
    </table>
}
@code {
    public List<Compra> compras { get; set; }

    private DateTime FechaFiltro = DateTime.Today.AddDays(+1);
    private string EmpleadoFiltro = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarCompras();
        }
        catch (Exception exception)
        {
            throw;
        }
    }

    async Task CargarCompras()
    {
        string fecha = Convert.ToString(FechaFiltro);

        var httpResponse = await Http.GetAsync($"api/compras/filtro?empleado={EmpleadoFiltro}&fecha={fecha}");
        //  implementar esta funcioin más tarde cuando se haga el modulo de seguridad
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            compras = JsonSerializer.Deserialize<List<Compra>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    void CrearCompra()
    {
        NavigationManager.NavigateTo("crear-compra");
    }

    private async Task Filtrar()
    {
        await CargarCompras();
    }

    private async Task Limpiar()
    {
        EmpleadoFiltro = string.Empty;
        FechaFiltro = DateTime.Today.AddDays(+1);
        await CargarCompras();
    }
}