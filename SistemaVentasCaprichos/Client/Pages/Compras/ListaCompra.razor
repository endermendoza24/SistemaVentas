@page "/lista-compras"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]
@using System.Text.Json

<div class="d-flex position-sticky justify-content-between mb-1">
    <div class="btn-group mr-2">
        <button @onclick="CrearCompra" class="btn btn-success"><i class="oi oi-plus"></i> Nueva compra</button>
    </div>
    <div class="input-group" style="width:60%">
        <input class="form-control" type="date" placeholder="Fecha compra" @bind="FechaFiltro" />
        <input class="form-control" type="text" placeholder="Nombre empleado" @bind="EmpleadoFiltro" />
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

@if (compras == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (compras.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron compras.</text>
    </div>
}
else
{
    <MudTable Items="@compras" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Compra,bool>(FilterFunc1)"
          @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Compras</MudText>
            <MudSpacer />
            @*<MudTextField @bind-Value="searchString1" Placeholder="Buscar..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
        </ToolBarContent>
        <HeaderContent>            
            <MudTh>Fecha</MudTh>
            <MudTh>Proveedor</MudTh>
            <MudTh>Empleado</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>            
            <MudTd DataLabel="Fecha">@context.Fecha.ToLongDateString()</MudTd>
            <MudTd DataLabel="Proveedor" Style="text-transform:uppercase">@context.Proveedores.Nombre</MudTd>
            <MudTd DataLabel="Empleado" Style="text-transform:uppercase">@context.ApplicationUser.NombreyApellido</MudTd>
            <MudTd DataLabel="Total">C$ @context.Total</MudTd>
            <MudTd>
                <MudFab Color="Color.Error" StartIcon="@Icons.Filled.Payment" Size="Size.Small"
                    @onclick="@(() => NavigationManager.NavigateTo($"/ver-compra/{context.Id}"))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    public List<Compra> compras { get; set; }
    
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Compra selectedItem1 = null;
    private HashSet<Compra> selectedItems = new HashSet<Compra>();

    private DateTime FechaFiltro = DateTime.Today.AddDays(+1);
    private string EmpleadoFiltro = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarCompras();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task CargarCompras()
    {
        string fecha = Convert.ToString(FechaFiltro);

        var httpResponse = await Http.GetAsync($"api/compras/filtro?empleado={EmpleadoFiltro}&fecha={fecha}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            compras = JsonSerializer.Deserialize<List<Compra>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    void CrearCompra()
    {
        NavigationManager.NavigateTo("crear-compra");
    }

    private async Task Filtrar()
    {
        await CargarCompras();
    }

    private async Task Limpiar()
    {
        EmpleadoFiltro = string.Empty;
        FechaFiltro = DateTime.Today.AddDays(+1);
        await CargarCompras();
    }
    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Compra element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Compra element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Fecha.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public void ShowBtnPress(int nr)
    {
        Compra compra = compras.First(f => f.Id == nr);
        compra.Estado = !compra.Estado;
    }
}