@page "/lista-clientes-bajas"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin, empleado")]
@using System.Text.Json

<div class="d-flex position-sticky justify-content-between">
    <div class="btn-group mr-2">
        <button @onclick="CrearCliente" class="btn btn-success"><i class="oi oi-plus"></i> Agregar cliente</button>
    </div>
    <div class="input-group" style="width:60%">
        <input class="form-control" type="text" placeholder="Nombre del cliente" @bind="NombreFiltro" />
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between mt-2 mb-2">
    <div class="btn-group">
        <button @onclick="MostrarTodos" style="background:none; border: none">
            <b>Ver todos</b>
        </button>       
    </div>
    <div class="d-flex justify-content-between mt-2 mb-2">
        <div class="btn-group">
            <a href="/lista-clientes" style="background:none; border:none">
                &nbsp;&nbsp;<b>Clientes activos</b>
            </a>
        </div>
    </div>
</div>

@if (clientes == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (clientes.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron clientes.</text>
    </div>
}
else
{
    <MudTable Items="@clientes" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Cliente,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Clientes dados baja</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>            
            <MudTh Class="thead-dark">Nombre</MudTh>
            <MudTh>Cédula</MudTh>
            <MudTh Style="width:50px">Sexo</MudTh>
            <MudTh>Dirección</MudTh>
            <MudTh>Teléfono</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>            
            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
            <MudTd DataLabel="Cédula">@context.Cedula</MudTd>
            <MudTd DataLabel="sexo">@context.Sexo</MudTd>
            <MudTd DataLabel="Dirección">@context.Dirección</MudTd>
            <MudTd DataLabel="Teléfono">@context.Teléfono</MudTd>
            <AuthorizeView Roles="admin">
                <Authorized Context="contexto">
                    <MudTd>
                        <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Filled.Edit" Size="MudBlazor.Size.Small"
                            @onclick="@(() => NavigationManager.NavigateTo($"/editar-cliente/{context.Id}"))" />
                    </MudTd>
                </Authorized>
            </AuthorizeView>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    public List<Cliente> clientes { get; set; } //muestra todos los clientes
    
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Cliente selectedItem1 = null;
    private HashSet<Cliente> selectedItems = new HashSet<Cliente>();

    private string NombreFiltro = String.Empty; //filtros

    protected bool lista = true;
    protected bool card = false;

    public int limitedeuda = 1000;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    async Task CargarClientes()
    {
        var httpResponse = await Http.GetAsync($"api/clientes/bajas?nombre={NombreFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            clientes = JsonSerializer.Deserialize<List<Cliente>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    void CrearCliente()
    {
        NavigationManager.NavigateTo("crear-cliente");
    }

    private async Task Filtrar()
    {
        await CargarClientes();
    }

    private async Task Limpiar()
    {
        NombreFiltro = string.Empty;
        await CargarClientes();
    }  

    async Task MostrarTodos()
    {
        await CargarClientes();
    }
    
    // función de búsqueda de mud blazor
    private bool FilterFunc1(Cliente element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Cliente element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Apellido.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

}
