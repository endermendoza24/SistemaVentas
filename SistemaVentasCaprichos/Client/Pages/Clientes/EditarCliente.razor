@page "/editar-cliente/{idcliente:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "admin, empleado")]

<button @onclick="@Volver" class="btn btn-sm btn-secondary">
    <i class="oi oi-arrow-circle-left"></i> Volver al listado
</button>

<hr />



<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar cliente</b></h3>
   @* <div>
        <MudTooltip>
            <ChildContent>
                <button @onclick="@(() => BorrarCliente(cliente.Id))" class="btn btn-sm btn-danger">
                    <i class="oi oi-trash"></i> Eliminar cliente
                </button>

            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.h6">ALERTA</MudText>
                <MudText Typo="Typo.body2">
                    Esta opción eliminará este elemento de forma
                    permanente
                </MudText>
                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" />
            </TooltipContent>
        </MudTooltip>


    </div>*@
</div>

<FormCliente cliente="cliente" OnValidSubmit="@EditarClient"
             ocultarcedula="ocultadni" TextBotonSubmit="Guardar cambios" />

@code {
    public Cliente cliente = new Cliente();    

    [Parameter] public int idcliente { get; set; }
    public bool ocultadni = true;

    protected async override Task OnParametersSetAsync()
    {
        cliente = await Http.GetFromJsonAsync<Cliente>($"api/clientes/{idcliente}");        
    }

    async Task BorrarCliente(int idcliente)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar cliente {cliente.Nombre}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"api/clientes/{idcliente}");

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-clientes");
                Snackbar.Add("Borrado con éxito", Severity.Success, a => a.VisibleStateDuration = 200);
                //await JS.InvokeVoidAsync("simple", "¡Éxito!",
                //"Cliente eliminado", "success");
            }
            else
            {
                //await JS.InvokeVoidAsync("simple", "Error",
                //"No se pudo eliminar cliente", "error");
                Snackbar.Add("Ha ocurrido un error", Severity.Error, a =>
       a.VisibleStateDuration = 200);
            }
        }
    }

    async Task EditarClient()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {cliente.Nombre}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync("api/clientes", cliente);

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-clientes");
                Snackbar.Add("Editado con éxito", Severity.Success, a => a.VisibleStateDuration = 200);
                //await JS.InvokeVoidAsync("simple", "¡Éxito!",
                //"Cliente editado", "success");
            }
            else
            {

                Snackbar.Add("Ha ocurrido un error", Severity.Error, a =>
        a.VisibleStateDuration = 200);
                //await JS.InvokeVoidAsync("simple", "Error",
                //  $"No se pudo editar cliente", "error");
            }
        }
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/lista-clientes");
    }
}
