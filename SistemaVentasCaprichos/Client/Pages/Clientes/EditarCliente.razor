@page "/editar-cliente/{idcliente:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS



<button @onclick="@Volver" class="btn btn-sm btn-secondary">
    <i class="oi oi-arrow-circle-left"></i> Volver al listado
</button>

<hr />

<div class="d-flex justify-content-between mb-3">
    <h3><b>Editar cliente</b></h3>
    <div>
        <button @onclick="@(() => BorrarCliente(cliente.Id))" class="btn btn-sm btn-danger">
            <i class="oi oi-trash"></i> Eliminar cliente
        </button>
    </div>
</div>

<FormCliente cliente="cliente" OnValidSubmit="@EditarClient"
             ocultadni="ocultadni" TextBotonSubmit="Guardar cambios" />


@code {
    public Cliente cliente = new Cliente();
    

    [Parameter] public int idcliente { get; set; }
    public bool ocultadni = true;

    protected async override Task OnParametersSetAsync()
    {
        cliente = await Http.GetFromJsonAsync<Cliente>($"api/clientes/{idcliente}");       
    }

    async Task BorrarCliente(int idcliente)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar cliente {cliente.NombreyApellido}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"api/clientes/{idcliente}");

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-clientes");
                await JS.InvokeVoidAsync("simple", "¡Éxito!",
                "Cliente eliminado", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    "No se pudo eliminar cliente", "error");
            }
        }
    }

    async Task EditarClient()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {cliente.NombreyApellido}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync("api/clientes", cliente);

            if (respuesta.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/lista-clientes");
                await JS.InvokeVoidAsync("simple", "¡Éxito!",
                "Cliente editado", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    $"No se pudo editar cliente", "error");
            }
        }
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/lista-clientes");
    }
}
