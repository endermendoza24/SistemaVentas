
<EditForm Model="@cliente" OnValidSubmit="@OnValidSubmit">
    <div class="form-field mt-2 mb-2">
        <div class="form-group row">
            <label class="col-3 col-form-label">Nombre</label>
            <div class="col">
                <div class="input-group">
                    <InputText @bind-Value="@cliente.Nombre" oninput="this.value=this.value.toUpperCase()" placeholder="Nombre" class="form-control" />
                </div>
                <ValidationMessage For="@(() => cliente.Nombre)" />
            </div>           
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">Apellido</label>
            <div class="col">
                <div class="input-group">
                    <InputText @bind-Value="@cliente.Apellido" oninput="this.value=this.value.toUpperCase()" placeholder="Apellido" class="form-control" />
                </div>
                <ValidationMessage For="@(() => cliente.Apellido)" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">Cédula</label>
            <div class="col">
                <div class="input-group">
                    <InputText @bind-Value="@cliente.Cedula" placeholder="Cédula" oninput="this.value=this.value.toUpperCase()" class="form-control"/>
                </div>
                <ValidationMessage For="@(() => cliente.Cedula)" />
            </div>            
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">Sexo</label>
            <div class="col">
                <div class="input-group">
                    <InputSelect @bind-Value="cliente.Sexo" class="form-control">
                        @foreach (string sexo in Enum.GetNames(typeof(Cliente.Sexos)))
                        {
                            <option value="@sexo"> @sexo</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => cliente.Sexo)" />
            </div>            
        </div>



        <div class="form-group row">
            <label class="col-3 col-form-label">Dirección</label>
            <div class="col">
                <div class="input-group">
                   <MudTextField @bind-Value="@cliente.Dirección" Label="Dirección"
                    Variant="Variant.Outlined" Lines="3"
                                          Margin="Margin.Dense"></MudTextField>
                            <ValidationMessage For="@(() => cliente.Dirección)" />
                </div>                
            </div>           
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">Teléfono</label>
            <div class="col">
                <div class="input-group">
                    <InputText @bind-Value="@cliente.Teléfono" class="form-control" oninput="this.value=this.value.toUpperCase()" placeholder="Teléfono" />
                </div>
                <ValidationMessage For="@(() => cliente.Teléfono)" />
            </div>

            <div class="form-group row">
                <label class="col-3 col-form-label">Estado</label>
                <div class="col">
                    <MudTooltip Text="Si selecciona esta opción dará de baja al cliente correspondiente."
                                Color="Color.Secondary" Placement="Placement.Top">
                        <MudSwitch @bind-Checked="@cliente.Estado" Label="Activo"
                                   Color="Color.Success" />
                    </MudTooltip>
                    <ValidationMessage For="@(() => cliente.Estado)" />
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-block btn-success">
            <i class="oi oi-check "></i>
            <text style="color:white"> @TextBotonSubmit</text>
        </button>
    </div>
    <DataAnnotationsValidator />
</EditForm>

@code {
    [Parameter] public Cliente cliente { get; set; } = new Cliente();
    [Parameter] public string TextBotonSubmit { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool ocultarcedula { get; set; } = false;
}